{"version":3,"sources":["webpack:///./src/components/Tags/index.js","webpack:///./src/components/PostsGrid/index.js","webpack:///./src/templates/blog-post.js"],"names":["Tags","tags","className","map","tag","to","PostsGrid","posts","post","frontmatter","thumbnail","date","postTitle","title","slug","fields","key","itemProp","itemScope","itemType","src","alt","BlogPostTemplate","data","location","markdownRemark","siteTitle","site","siteMetadata","previous","next","more","excerpt","html","description","keywords","dangerouslySetInnerHTML","__html","style","display","flexWrap","justifyContent","listStyle","padding","rel","nodes"],"mappings":"2FAAA,+CAkBeA,IAbF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACX,6BAASC,UAAU,mBAChBD,EAAKE,KAAI,SAACC,GAAD,OACR,kBAAC,OAAD,CACEC,GAAE,SAAWD,EACbF,UAAU,cAETE,S,yDCZT,2DA4CeE,IArCG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,oCACE,yBAAKL,UAAU,iBACb,4CACA,kBAAC,OAAD,CAAMG,GAAG,SAAT,aAEF,wBAAIH,UAAU,cACXK,EAAMJ,KAAI,SAACK,GACV,MAIIA,EAHFC,YACEC,EAFJ,EAEIA,UAAWT,EAFf,EAEeA,KAAMU,EAFrB,EAEqBA,KAAaC,EAFlC,EAE2BC,MACZC,EACXN,EADCO,OAAUD,KAEf,OACE,wBAAIE,IAAKF,EAAMZ,UAAU,cACvB,kBAAC,OAAD,CAAMG,GAAIS,EAAMG,SAAS,OACvB,6BACEC,WAAS,EACTC,SAAS,6BAET,yBAAKC,IAAKV,EAAWW,IAAI,KACzB,gCACE,wBAAInB,UAAU,oBACXU,GAEH,+BAAQD,IAEV,kBAAC,IAAD,CAAMV,KAAMA,c,yDClC5B,gFAqFeqB,UA9EU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEdhB,EAKde,EALFE,eAC+BC,EAI7BH,EAJFI,KAAQC,aAAgBf,MACxBgB,EAGEN,EAHFM,SACAC,EAEEP,EAFFO,KACAC,EACER,EADFQ,KAIAC,EAQExB,EARFwB,QACAC,EAOEzB,EAPFyB,KAFF,EASIzB,EANFC,YACEI,EAJJ,EAIIA,MACAqB,EALJ,EAKIA,YACAvB,EANJ,EAMIA,KACAV,EAPJ,EAOIA,KAIJ,OACE,kBAAC,IAAD,CAAQuB,SAAUA,EAAUX,MAAOa,GACjC,kBAAC,IAAD,CACEb,MAAOA,EACPsB,SAAUlC,EACViC,YAAaA,GAAeF,IAE9B,6BACE9B,UAAU,YACVgB,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIF,SAAS,YAAYJ,GACzB,2BAAIF,IAEN,6BAEEyB,wBAAyB,CAAEC,OAAQJ,GACnChB,SAAS,gBAEX,8BAEF,yBAAKf,UAAU,iBACb,wBACEoC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,4BACGd,GACC,kBAAC,OAAD,CAAMxB,GAAIwB,EAASd,OAAOD,KAAM8B,IAAI,QAApC,IAEG,IACAf,EAASpB,YAAYI,QAI5B,4BACGiB,GACC,kBAAC,OAAD,CAAMzB,GAAIyB,EAAKf,OAAOD,KAAM8B,IAAI,QAC7Bd,EAAKrB,YAAYI,MACjB,IAFH,QASR,kBAAC,IAAD,CAAWN,MAAOwB,EAAKc","file":"component---src-templates-blog-post-js-2a37019fb802a21abbe2.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport './style.scss';\n\nconst Tags = ({ tags }) => (\n  <section className=\"tags__container\">\n    {tags.map((tag) => (\n      <Link\n        to={`/tags/${tag}`}\n        className=\"tags__link\"\n      >\n        {tag}\n      </Link>\n    ))}\n  </section>\n);\n\nexport default Tags;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport Tags from '../Tags';\n\nimport './style.scss';\n\nconst PostsGrid = ({ posts }) => (\n  <>\n    <div className=\"post__section\">\n      <h4>Latest Blogs</h4>\n      <Link to=\"/blog\">View All</Link>\n    </div>\n    <ol className=\"post__grid\">\n      {posts.map((post) => {\n        const {\n          frontmatter: {\n            thumbnail, tags, date, title: postTitle,\n          }, fields: { slug },\n        } = post;\n        return (\n          <li key={slug} className=\"post__item\">\n            <Link to={slug} itemProp=\"url\">\n              <article\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <img src={thumbnail} alt=\"\" />\n                <header>\n                  <h4 className=\"post__item-title\">\n                    {postTitle}\n                  </h4>\n                  <small>{date}</small>\n                </header>\n                <Tags tags={tags} />\n              </article>\n            </Link>\n          </li>\n        );\n      })}\n    </ol>\n  </>\n);\n\nexport default PostsGrid;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport PostsGrid from '../components/PostsGrid';\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const {\n    markdownRemark: post,\n    site: { siteMetadata: { title: siteTitle } },\n    previous,\n    next,\n    more,\n  } = data;\n\n  const {\n    excerpt,\n    html,\n    frontmatter: {\n      title,\n      description,\n      date,\n      tags,\n    },\n  } = post;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={title}\n        keywords={tags}\n        description={description || excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{title}</h1>\n          <p>{date}</p>\n        </header>\n        <section\n          // eslint-disable-next-line react/no-danger\n          dangerouslySetInnerHTML={{ __html: html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ←\n                {' '}\n                {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title}\n                {' '}\n                →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      <PostsGrid posts={more.nodes} />\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    more: allMarkdownRemark(\n      limit: 3, \n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tags\n          thumbnail\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}