{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-10-09-lazy-promises-final/","result":{"data":{"site":{"siteMetadata":{"title":"CDS - Creative Data Science"}},"markdownRemark":{"id":"16ecc8d6-568e-52e4-9c0c-97e5c7bd3545","excerpt":"I am excited by the recent article Promises Are Made to Be Broken about the authors’ efforts to migrate ’s lazy evaluation to strict semantics.  was the first…","html":"<p style=\"text-align:center;\"><img src=\"/images/sloth.png\" width=\"400\" align=\"center\"/></p>\n<p>I am excited by the recent article <a href=\"http://aviral.io/static/pdfs/promises-are-made-to-be-broken.pdf\">Promises Are Made to Be Broken</a> about the authors’ efforts to migrate <code class=\"language-text\">R</code>’s lazy evaluation to strict semantics.</p>\n<p><code class=\"language-text\">R</code> was the first programming language I learned (started about 10 years ago) and genuinely feel that its flexibility to execute functional programming patterns has greatly improved my productivity. While I’ve often taken advantage of a variety of lazy evaluation benefits and as mentioned in the article risks I’ve generally found <code class=\"language-text\">R</code>’s flexibility predictable and greatly appreciated.</p>\n<p>Many of my favorite <code class=\"language-text\">R</code> packages like <code class=\"language-text\">dplyr</code> also leverage lazy evaluation and I have rarely consider the impact of lazy semantics or that ‘arguments are suspended computations that are evaluated if\nand when they are needed’. While I rarely use meta-programming patterns I have found anonymous function arguments passed as <code class=\"language-text\">...</code> very useful.</p>\n<p>I’ve generally found that using <code class=\"language-text\">...</code> works as expected. For example, take the following tests for our custom function <code class=\"language-text\">foo</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">foo <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token ellipsis\">...</span><span class=\"token punctuation\">,</span> fizz <span class=\"token operator\">=</span> <span class=\"token string\">'buzz'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  c<span class=\"token punctuation\">(</span>as.list<span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">(</span><span class=\"token ellipsis\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## $bar\n## [1] \"foo\"\n## \n## $fizz\n## [1] \"buzz\"</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">foo<span class=\"token punctuation\">(</span>bazz<span class=\"token operator\">=</span>rnorm<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## $bar\n## [1] \"foo\"\n## \n## $fizz\n## [1] \"buzz\"\n## \n## $bazz\n## [1] 0.6520186</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">foo<span class=\"token punctuation\">(</span>bazz<span class=\"token operator\">=</span>rnorm<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bar<span class=\"token operator\">=</span><span class=\"token string\">'bazz'</span><span class=\"token punctuation\">,</span>fizz<span class=\"token operator\">=</span>rnorm<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## $bar\n## [1] \"bazz\"\n## \n## $fizz\n## [1] -0.5202518 -2.2660911\n## \n## $bazz\n## [1] 0.711274</code></pre></div>\n<p>Meta-programming example from the paper.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">f <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nprint<span class=\"token punctuation\">(</span>deparse<span class=\"token punctuation\">(</span>substitute<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">&lt;-</span> eval<span class=\"token punctuation\">(</span>substitute<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nx<span class=\"token operator\">+</span>a\n<span class=\"token punctuation\">}</span>\n\nf<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## [1] \"1 + 2\"</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## [1] 10</code></pre></div>\n<p>I am excited to see where the authous’ goals to ‘to migrate R\nprograms to a strict-by-default, lazy-on-demand semantics.’ takes <code class=\"language-text\">R</code>.</p>","frontmatter":{"title":"Making R strict-by-default and lazy-on-demand","date":"October 09, 2021","description":null,"tags":["programming","R"]}},"more":{"nodes":[{"fields":{"slug":"/network_mapping_101/"},"frontmatter":{"date":"November 30, 2021","title":"Network mapping 101 hands-on course and DAVe in review","description":null,"tags":["R","network analysis","network mapping","data visualization","multivariate analysis","machine learning","preprocessing","statistical analysis","clustering"],"thumbnail":"/images/network_mapping_101_thumbnail.png"}},{"fields":{"slug":"/2021-10-26-pathway-enriched-mapped-networks/"},"frontmatter":{"date":"October 26, 2021","title":"Pathway enrichment-based network mapping to visualize metabolite evidence for associations with disease","description":null,"tags":["R","network analysis","network mapping","data visualization","pathways"],"thumbnail":"/images/pathway_network.png"}},{"fields":{"slug":"/2021-10-21-hyper-edge-comparions-final/"},"frontmatter":{"date":"October 21, 2021","title":"Using network hyper edges to encode complex experimental designs","description":null,"tags":["programming","R","network analysis","network mapping","data visualization"],"thumbnail":"/images/hyper-edge-comparisons.png"}}]},"previous":{"fields":{"slug":"/2021-07-1-getting-started-again-final/"},"frontmatter":{"title":"Publication record in review and onto new beginings"}},"next":{"fields":{"slug":"/2021-10-21-hyper-edge-comparions-final/"},"frontmatter":{"title":"Using network hyper edges to encode complex experimental designs"}}},"pageContext":{"id":"16ecc8d6-568e-52e4-9c0c-97e5c7bd3545","previousPostId":"ea2df33f-bd7c-5abc-8a29-f2bae796c4e0","nextPostId":"0ab66ed2-6c60-59eb-a442-dbc746493ffc"}},"staticQueryHashes":["1713152521","2841359383"]}